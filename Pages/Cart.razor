@page "/cart"
@using System.Text.Json.Serialization

<h3>Shopping Cart</h3>

@if (cartItems == null || cartItems.Count == 0) {
    <MudText>No items in the cart.</MudText>
} else {
    <MudTable Items="cartItems" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Product</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Total</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.name</MudTd>
            <MudTd>
                <MudNumericField T="int" Min="1" Value="@context.Quantity" ValueChanged="@(async (int val) => await UpdateQuantity(context, val))" />
            </MudTd>
            <MudTd>$@context.price</MudTd>
            <MudTd>$@LineTotal(context.price, context.Quantity)</MudTd> 
            <MudTd>
                <MudButton Color="Color.Error" OnClick="@(async () => await RemoveFromCart(context))">Remove</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudText Typo="Typo.h5" Align="Align.Right" Class="mt-3">Order Total: $@OrderTotal</MudText>

    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Checkout" Class="mt-4">Checkout</MudButton>
}

@code {
    List<Product> cartItems;
    decimal OrderTotal => cartItems?.Sum(item => (decimal)item.price * item.Quantity) ?? 0;
    decimal LineTotal(float price, float quantity) => (decimal)price * (decimal)quantity;

    [Inject]
    CartService CartService { get; set; }

    [Inject]
    HttpClient HttpClient { get; set; }

    [Inject]
    NavigationManager Navigation { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    protected override async Task OnInitializedAsync() {
        cartItems = await CartService.GetCartItemsAsync();
        CartService.OnChange += StateHasChanged;

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (queryParams["canceled"] == "true") {
            Snackbar.Add("The checkout process was canceled. Please try again.", Severity.Error);
        } else if (queryParams["success"] == "true") {
            Snackbar.Add("Checkout completed successfully!", Severity.Success);
        }
    }

    private async Task UpdateQuantity(Product item, int quantity) {
        item.Quantity = quantity;
        await CartService.UpdateCartItemAsync(item);
        StateHasChanged();
    }

    private async Task RemoveFromCart(Product item) {
        await CartService.RemoveCartItemAsync(item);
        cartItems = await CartService.GetCartItemsAsync();
        StateHasChanged();
    }

    private async Task Checkout() {
        var checkoutItems = cartItems.Select(item => new CheckoutRequestItem {
                PriceID = item.priceID,
                Quantity = item.Quantity
            }).ToList();

        var checkoutRequest = new CheckoutRequest {
                Items = checkoutItems
            };

        var response = await HttpClient.PostAsJsonAsync("http://localhost:4242/create-checkout-session", checkoutRequest);

        if (response.IsSuccessStatusCode) {
            var result = await response.Content.ReadFromJsonAsync<CheckoutResponse>();
            var checkoutUrl = result?.Url;
            Navigation.NavigateTo(checkoutUrl);
        } else {
        }
    }


    private class CheckoutRequest {
        [JsonPropertyName("items")]
        public List<CheckoutRequestItem> Items { get; set; }
    }

    private class CheckoutRequestItem {
        [JsonPropertyName("quantity")]
        public int Quantity { get; set; }

        [JsonPropertyName("priceID")]
        public string PriceID { get; set; }
    }
    private class CheckoutResponse {
        [JsonPropertyName("url")]
        public string Url { get; set; }
        [JsonPropertyName("succeed")]
        public string Succeed { get; set; }
    }
}
